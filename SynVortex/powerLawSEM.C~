/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright held by original author
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

\*---------------------------------------------------------------------------*/
#include "createFields.H"
#include "powerLawSEM.H"
#include "addToRunTimeSelectionTable.H"
#include "fvPatchFieldMapper.H"
#include "volFields.H"
#include "surfaceFields.H"
#include "fvMesh.H"
#include "fvCFD.H"
#include "RASModel.H"
#include "wallFvPatch.H"
#include "OFstream.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

powerLawSEMFvPatchVectorField::powerLawSEMFvPatchVectorField
(
    const fvPatch& p,
    const DimensionedField<vector, volMesh>& iF
)
:
    fixedValueFvPatchVectorField(p, iF),
    n_(1, 0, 0),
    y_(0, 1, 0),
    BoundIntensity_(5e-4),
    maxPerturbation_(27.5)
{}


powerLawSEMFvPatchVectorField::powerLawSEMFvPatchVectorField
(
    const powerLawSEMFvPatchVectorField& ptf,
    const fvPatch& p,
    const DimensionedField<vector, volMesh>& iF,
    const fvPatchFieldMapper& mapper
)
:
    fixedValueFvPatchVectorField(ptf, p, iF, mapper),
    n_(ptf.n_),
    y_(ptf.y_),
    BoundIntensity_(ptf.BoundIntensity_),
    maxPerturbation_(ptf.maxPerturbation_)
{}


powerLawSEMFvPatchVectorField::powerLawSEMFvPatchVectorField
(
    const fvPatch& p,
    const DimensionedField<vector, volMesh>& iF,
    const dictionary& dict
)
:
    fixedValueFvPatchVectorField(p, iF),
    n_(dict.lookup("n")),
    y_(dict.lookup("y")),
    BoundIntensity_(readScalar(dict.lookup("BoundIntensity"))),
    maxPerturbation_(readScalar(dict.lookup("maxPerturbation")))
{
    if (mag(n_) < SMALL || mag(y_) < SMALL)
    {
        FatalErrorIn("powerLawSEMFvPatchVectorField(dict)")
            << "n or y given with zero size not correct"
            << abort(FatalError);
    }

    n_ /= mag(n_);
    y_ /= mag(y_);

    evaluate();
}


powerLawSEMFvPatchVectorField::powerLawSEMFvPatchVectorField
(
    const powerLawSEMFvPatchVectorField& fcvpvf,
    const DimensionedField<vector, volMesh>& iF
)
:
    fixedValueFvPatchVectorField(fcvpvf, iF),
    n_(fcvpvf.n_),
    y_(fcvpvf.y_),
    BoundIntensity_(fcvpvf.BoundIntensity_),
    maxPerturbation_(fcvpvf.maxPerturbation_)
{}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

void powerLawSEMFvPatchVectorField::updateCoeffs()
{

    if (updated())
    {
        return;
    }

    const scalar t_ = this->db().time().timeOutputValue();
    scalar startT = this->db().time().startTime().value();
    scalar deltaT_ = db().time().deltaTValue();
    scalar nSteps = (t_ - startT)/deltaT_;

        //cout << "updating synthetic eddies" << "\n";
    scalar Uref_=27.54;
    //BoundIntensity_=5.0e-4;
    zref_=0.0345;  //hight matching power law
    scalar xInlet_=-0.312;

    yMin_ = 0;
    yMax_ = 0.078;
    zMin_ = -0.156;
    zMax_= 0.156;
   int i,j,k;

    int rank = Pstream::myProcNo();



    scalar Ytop_= 0.2496;

    const vectorField& c = patch().Cf();
    const scalarField vol1=patch().magSf();
    scalarField coord = (c & y_);
    vectorField Uinf = (n_*Uref_*pow(sqrt(sqr(min(min(coord,Ytop_-coord),zref_)/zref_)),1.0/5.0));
    

   // vectorField Uinf = (n_*Uref_*pow(sqrt(sqr(min(coord,zref_)/zref_)),1.0/7.0));

    scalarField xx = c.component(vector::X);
    scalarField yy = c.component(vector::Y);
    scalarField zz = c.component(vector::Z);
    scalarField delta_=pow(vol1,1.0/3.0);

if(rank == 0)
{  
if(t_ > startT  +1.0e-8)
{

if (t_  < startT + 2*deltaT_)
     {
    i = 0;
    j = 0;
    int count;
    bool indexed = false;
    scalar tol_ = 1e-5; //1.e-07; //1.e-07; //1.e-03; //sadbg: TAKE THIS AS INPUT

    forAll(Uinf, faceI)
      {
        //sadbg: Check for already indexed faces
        //sadbg: Take the tolerance as user input to generalize this code
        for(count=0;count<i;count++)
          {
        if(mag(storedRad[count]-yy[faceI]) <= tol_)
          {
            // cout << "I am here ... " <<"\t" << i << "\t" << rr[faceI] << "\n";
            indexed = true;
          }
          }

        if(indexed==false)
          {
        j = 0;
        indexI[faceI] = i;
        indexJ[faceI] = j;

        forAll(Uinf, faceJ)
          {
            if((faceI != faceJ)&&(mag(yy[faceJ]-yy[faceI]) <= tol_))
              {
                        j++;
            indexI[faceJ] = i;
            indexJ[faceJ] = j;
            storedRad[i] = yy[faceJ];
            
                    //cout << storedRad[i] << "\t" << i << "\t" << j << "\n";
              }
          }
        i++;
          }

        indexed = false;
      }


        const fvMesh& mesh = patch().boundaryMesh().mesh();
        label inletPatchID = mesh.boundaryMesh().findPatchID("INLET");
        const scalarField kField_ = db().objectRegistry::lookupObject<volScalarField>("k").boundaryField()[inletPatchID];
        const scalarField omegaField_ = db().objectRegistry::lookupObject<volScalarField>("omega").boundaryField()[inletPatchID];
        const scalarField nutField_ = db().objectRegistry::lookupObject<volScalarField>("nut").boundaryField()[inletPatchID];
            // k and omega field are volscalarfield of the whole domain

        forAll(yy, faceI)
        {
        int i = indexI[faceI];
        int j = indexJ[faceI];

        sigma_[i][j] = max(min(Foam::pow(kField_[faceI],3.0/2.0)/(0.09 *(kField_[faceI]+1e-6)*omegaField_[faceI]),scalar(0.41)*zref_),delta_[faceI]);

        sigmaMax_ =max(sigmaMax_, sigma_[i][j]);
        sigmaMin_ =min(sigmaMin_, sigma_[i][j]);

        scalar RSTbase_;
        RSTbase_=2.0/3.0*kField_[faceI];

                RST11=RSTbase_ - nutField_[faceI]*Uinf[faceI].x()*Uinf[faceI].x();
                RST22=RSTbase_ - nutField_[faceI]*Uinf[faceI].y()*Uinf[faceI].y();
                RST33=RSTbase_ - nutField_[faceI]*Uinf[faceI].z()*Uinf[faceI].z();
                RST21=RSTbase_ - nutField_[faceI]*Uinf[faceI].y()*Uinf[faceI].x();
                RST31=RSTbase_ - nutField_[faceI]*Uinf[faceI].z()*Uinf[faceI].x();
                RST32=RSTbase_ - nutField_[faceI]*Uinf[faceI].z()*Uinf[faceI].y();

                a11[i][j]=Foam::sqrt(std::abs(RST11));
                a21[i][j]=RST21/(a11[i][j]+1e-6);
                a22[i][j]=Foam::sqrt(std::abs(RST22));
                a31[i][j]=RST31/(a11[i][j]+1e-6);
                a32[i][j]=(RST32-a21[i][j]*a31[i][j])/(a22[i][j]+1e-6);
                a33[i][j]=Foam::sqrt(std::abs(RST33-a31[i][j]*a31[i][j]-a32[i][j]*a32[i][j]));

        }

    }

    int N_;

        xMax_ = xInlet_+sigmaMax_;
        xMin_ = xInlet_-1.0* sigmaMax_;
        yMin_ -= sigmaMax_;
        yMax_ += sigmaMax_;
        zMin_ -= sigmaMax_;
        zMax_ += sigmaMax_;

    //Info << "sigma Min = " << sigmaMin_ << "\t" << "sigma Max = " << sigmaMax_ << endl;
    //Info << "x Min = " << xMin_ << "\t" << "x Max = " << xMax_ << endl;
        VB_=(xMax_-xMin_)*(yMax_-yMin_)*(zMax_-zMin_);

     //calculate eddy number
        N_=floor(VB_/(sigmaMin_*sigmaMin_*sigmaMin_+1.0e-6));
    if (N_ > 3000)
    {N_ = 3000;}


 if (t_  < startT + 2*deltaT_)
     {
        for (int i=1;i<=N_+1;i++)
            {
                srand(i+time(NULL));
                randomArray[i]=rand()*100000.0/double(RAND_MAX);
     
                int seedArray = floor(randomArray[i]);
                srand(seedArray);
                randomArray1[i] =rand()*100000.0/double(RAND_MAX);
     
                seedArray = floor(randomArray1[i]);
                srand(seedArray);
                randomArray2[i] =rand()*100000.0/double(RAND_MAX);
     
                seedArray = floor(randomArray2[i]);
                srand(seedArray);
                randomArray3[i] =rand()*100000.0/double(RAND_MAX);
     
            }
     
            for (int i=1;i<=N_;i++) //creat more eddy positions for future steps to access
            {
                for (int j=1;j<4;j++)
                {
                    srand (randomArray1[i]+ randomArray2[i]+ 100*j);
                    intensity_[j][i]=(rand()*1.0/double(RAND_MAX))*2.0*BoundIntensity_-BoundIntensity_;
                }
     
                srand (randomArray1[i]+time(NULL));
                xPosi_[i]=(rand()*1.0/double(RAND_MAX))*(xMax_-xMin_)+xMin_;
     
                srand (randomArray2[i]+time(NULL));
                yPosi_[i]=(rand()*1.0/double(RAND_MAX))*(yMax_-yMin_)+yMin_;
     
                srand (randomArray3[i]+time(NULL));
                zPosi_[i]=(rand()*1.0/double(RAND_MAX))*(zMax_-zMin_)+zMin_;
            }
     
     }
     
     
    if (counter < nSteps*6.0 -5.5)
    {
        /////////////// eddy convection, get delta T
     if (t_  > startT + 2*deltaT_)
     {
        
       for (i = 1; i <= N_; i++)
       {
           xPosi_[i] = xPosi_[i] + Uref_ * deltaT_; // convecting five times per time step
           if ((xPosi_[i]) > xMax_)
           {
               for (j=1;j<4;j++)
               {
                   srand (time(NULL) + randomArray4[i] + randomArray3[i]+  j);
                   intensity_[j][i]=(rand()*1.0/double(RAND_MAX))*2.0*BoundIntensity_-BoundIntensity_;
               }
               
               xPosi_[i]=xPosi_[i]-(xMax_-xMin_);
           
               srand (time(NULL)+ randomArray2[i]);
               yPosi_[i]=(rand()*1.0/double(RAND_MAX))*(yMax_-yMin_)+yMin_;
               srand (time(NULL) + randomArray3[i]);
               zPosi_[i]=(rand()*1.0/double(RAND_MAX))*(zMax_-zMin_)+zMin_;
               //Info << "regenerate Eddy convected through inlet" << endl;
           }
        }
      }
    }

//Info << "nsteps = " << nSteps*6.0 -4.5 << endl; 
  //Info << "Eddy Number = " << N_<< endl;
   // Info << "I am here" << N_<< endl;
    scalar f1_, f2_, f3_;
    scalar xMaxPert = 0.00001, yMaxPert = 0.00001, zMaxPert = 0.00001;
    scalar distance_;
    vector xyzscale;

if (t_  > startT + 2.0*deltaT_)
   {
//Info << "counter = " << counter << "\t" << "nsteps = "<<nSteps*6.0-4.5 << endl;
        if (counter < nSteps*6.0 -5.5)
        {   

            Info << "updating perturbations " << endl;
                forAll(Uinf,faceI)
                {
                    i = indexI[faceI];
                    j = indexJ[faceI];
                    
                    upert[i][j] = 0;
                    vpert[i][j] = 0;
                    wpert[i][j] = 0;


                    if (((zz[faceI] > zMin_)&&(zz[faceI] < zMax_))&& (yy[faceI] < yMax_))
                    {
                        
                        for ( k = 1; k <= N_; k++)
                        {
                            //  calculate fsigma
                            f1_ = std::abs(xx[faceI]-xPosi_[k])/(sigma_[i][j]+1.0e-6);
                            f2_ = std::abs(yy[faceI]-yPosi_[k])/(sigma_[i][j]+1.0e-6);
                            f3_ = std::abs(zz[faceI]-zPosi_[k])/(sigma_[i][j]+1.0e-6);
            
                            if (((f1_ < 1.0)&&(f2_ < 1.0))&&(f3_< 1.0))
                                { 
                                    fsigma_[k]=Foam::sqrt(VB_+1.0e-4)/(sigma_[i][j]*sigma_[i][j]*sigma_[i][j]+1.0e-6)
                                    *Foam::sqrt(3.0/2.0)*(1.0-std::abs(f1_))*Foam::sqrt(3.0/2.0)*(1.0-std::abs(f2_))*Foam::sqrt(3.0/2.0)*(1.0-std::abs(f3_));
                                	
        
        			                 distance_ = Foam::sqrt(Foam::sqr(xx[faceI]-xPosi_[k])+Foam::sqr(yy[faceI]-yPosi_[k])+Foam::sqr(zz[faceI]-zPosi_[k]));
        
                                
                                        upert[i][j] += 1.0/std::sqrt(N_)*(a11[i][j]*intensity_[1][k])*fsigma_[k]*distance_;
                                        vpert[i][j] += 1.0/std::sqrt(N_)*(a21[i][j]*intensity_[1][k]+a22[i][j]*intensity_[2][k])*fsigma_[k]*distance_;
                                        wpert[i][j] += 1.0/std::sqrt(N_)*(a31[i][j]*intensity_[1][k]+a32[i][j]*intensity_[2][k]+a33[i][j]*intensity_[3][k])*fsigma_[k]*distance_;
        
                                }
                        }
        
        
                        xMaxPert = max(xMaxPert,mag(upert[i][j]));
                        yMaxPert = max(yMaxPert,mag(vpert[i][j]));
                        zMaxPert = max(zMaxPert,mag(wpert[i][j]));

                    }
                }
            
        	//vector xyzscale;
        	 xyzscale.x() = maxPerturbation_/xMaxPert;
        	 xyzscale.y() = maxPerturbation_/yMaxPert;
        	 xyzscale.z() = maxPerturbation_/zMaxPert;
        		
        	  forAll(Uinf,faceI)
                {
                    i = indexI[faceI];
                    j = indexJ[faceI];
                
                    upert[i][j] = upert[i][j] * xyzscale.x();
                    vpert[i][j] = vpert[i][j] * xyzscale.y();
                    wpert[i][j] = vpert[i][j] * xyzscale.z();
                }

        }//if (counter < nSteps*6.0 -4.5)

        forAll(Uinf,faceI)
             {
                    i = indexI[faceI];
                    j = indexJ[faceI];
                  
                    Uinf[faceI].x() +=  upert[i][j];
                    Uinf[faceI].y() +=  vpert[i][j];
                    Uinf[faceI].z() +=  wpert[i][j];
              }

        

    }
/*
   std::ofstream FieldValue("FieldValue.dat");
   std::ofstream EddyValue("EddyValue.dat");
   std::ofstream Random("Random.dat");
   
   for (i=1; i <= N_ ; i++)
   {
       EddyValue << "\t" << i << "\t" << xPosi_[i] << "\t" << yPosi_[i] << "\t" << zPosi_[i] << "\t" << intensity_[1][i] << "\n" << endl;
       Random << "\t" << randomArray1[i]<< "\t" << randomArray2[i]<< "\t" << randomArray3[i]<< "\n" << endl;
   }
   
forAll(Uinf,faceI)
   {   i = indexI[faceI];
       j = indexJ[faceI];
       FieldValue << "\t" << i << "\t" << j << "\t" << upert[i][j] << "\t" << vpert[i][j] << "\t" << wpert[i][j]<< "\n"<< endl;  
    }
*/
    
}// if t_ > 1e-8
counter++;

vectorField::operator=(Uinf);
//Info << "I am here 4" << endl;

//Info << "counter = " << counter << endl;
}//rank = 0

}




// Write
void powerLawSEMFvPatchVectorField::write(Ostream& os) const
{
    fvPatchVectorField::write(os);
    os.writeKeyword("n")
        << n_ << token::END_STATEMENT << nl;
    os.writeKeyword("y")
        << y_ << token::END_STATEMENT << nl;
    os.writeKeyword("BoundIntensity")
        << BoundIntensity_ << token::END_STATEMENT << nl;
    os.writeKeyword("maxPerturbation")
        << maxPerturbation_ << token::END_STATEMENT << nl;
 this->writeEntry("value", os);
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

makePatchTypeField(fvPatchVectorField, powerLawSEMFvPatchVectorField);

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// ************************************************************************* //
